<?php

/**
 * Implements hook_menu().
 */
function uc_multi_currency_menu() {
  $items = array();

  $items['admin/store/settings/currency'] = array(
    'description' => 'Manage available currencies and configure display formats.',
    'title' => 'Currencies',
    'access arguments' => array('administer currency'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_multi_currency_currency_list_form'),
    'file' => 'uc_multi_currency.admin.inc',
  );
  $items['admin/store/settings/currency/list'] = array(
    'title' => 'Currencies',
    'weight' => -10,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/store/settings/currency/add'] = array(
    'title' => 'Add new currency',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_multi_currency_currency_edit_form'),
    'access arguments' => array('administer currency'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'uc_multi_currency.admin.inc',
  );
  $items['admin/store/settings/currency/%/enable'] = array(
    'title' => 'Enable',
    'page callback' => 'uc_multi_currency_currency_enable',
    'page arguments' => array(4),
    'access arguments' => array('administer currency'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_multi_currency.admin.inc',
  );
  $items['admin/store/settings/currency/%/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_multi_currency_currency_edit_form', 4),
    'access arguments' => array('administer currency'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_multi_currency.admin.inc',
  );
  $items['admin/store/settings/currency/%/delete'] = array(
    'title' => 'Remove',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_multi_currency_currency_delete_form', 4),
    'access arguments' => array('administer currency'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_multi_currency.admin.inc',
  );

  $items['admin/store/settings/currency/usage'] = array(
    'title' => 'Selection',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_multi_currency_currency_usage_form'),
    'access arguments' => array('administer currency'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'uc_multi_currency.providers.inc',
  );
  $items['admin/store/settings/currency/usage/configure/manual'] = array(
    'title' => 'Currency selection provider configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_multi_currency_provider_manual_settings_form'),
    'access arguments' => array('administer currency'),
    'file' => 'providers/uc_multi_currency_provider_manual.inc',
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['admin/store/settings/currency/usage/configure/localized'] = array(
    'title' => 'Currency selection provider configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_multi_currency_provider_localized_settings_form'),
    'access arguments' => array('administer currency'),
    'file' => 'providers/uc_multi_currency_provider_localized.inc',
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['admin/store/settings/currency/usage/configure/roles'] = array(
    'title' => 'Currency selection provider configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_multi_currency_provider_roles_settings_form'),
    'access arguments' => array('administer currency'),
    'file' => 'providers/uc_multi_currency_provider_roles.inc',
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['admin/store/settings/currency/usage/configure/types'] = array(
    'title' => 'Currency selection provider configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_multi_currency_provider_types_settings_form'),
    'access arguments' => array('administer currency'),
    'file' => 'providers/uc_multi_currency_provider_types.inc',
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['admin/store/settings/currency/usage/configure/taxonomy'] = array(
    'title' => 'Currency selection provider configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_multi_currency_provider_taxonomy_settings_form'),
    'access arguments' => array('administer currency'),
    'file' => 'providers/uc_multi_currency_provider_taxonomy.inc',
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );

  $items['uc_multi_currency/%/set'] = array(
    'title' => 'Set currency',
    'description' => 'Set active currency for the current user',
    'page callback' => 'uc_multi_currency_set_currency',
    'page arguments' => array(1),
    'access arguments' => array('choose currency'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_multi_currency.providers.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function uc_multi_currency_permission() {
  $permissions = array();

  $permissions['administer currency'] = array(
    'title' => t('Administer currencies'),
  );
  $permissions['choose currency'] = array(
    'title' => t('Choose currency during purchase'),
  );

  return $permissions;
}

/**
 * Implements hook_views_api().
 */
function uc_multi_currency_views_api() {
  return array(
    'api' => '2.0',
    'path' => drupal_get_path('module', 'uc_multi_currency') . '/views',
  );
}

/**
 * Implements hook_theme().
 */
function uc_multi_currency_theme() {
  return array(
    'uc_multi_currency_uc_price' => array(
      'variables' => array('price' => 0, 'currency' => 0, 'suffixes' => NULL),
      'file' => 'uc_multi_currency.theme.inc',
    ),
    'uc_multi_currency_uc_product_price' => array(
      'render element' => 'element',
      'file' => 'uc_multi_currency.theme.inc',
    ),
    'uc_multi_currency_uc_price_textfield' => array(
      'render element' => 'element',
      'file' => 'uc_multi_currency.theme.inc',
    ),
    'uc_multi_currency_object_options_form' => array(
      'render element' => 'form',
      'file' => 'uc_multi_currency.theme.inc',
    ),
    'uc_multi_currency_currency_usage_form' => array(
      'render element' => 'form',
      'file' => 'uc_multi_currency.providers.inc',
    ),
    'uc_multi_currency_textfield_table' => array(
      'render element' => 'element',
      'file' => 'uc_multi_currency.theme.inc',
    ),
  );
}

/**
 * Implements hook_help().
 */
function uc_multi_currency_help($path, $arg) {
  switch ($path) {
    case 'admin/store/settings/currency/usage':
      $output = '<p>'. t("Define how to decide which currency is used. This decision is made by evaluating a series of detection methods; the first detection method that gets a result will determine which currency is used. Define the order of evaluation of currency detection methods on this page.") .'</p>';
      return $output;
    case 'admin/store/settings/currency/usage/configure/%':
      $output = '<p>'. t("Leaving a currency <em>undecided</em> will return to the next provider in the configuration list.") .'</p>';
      return $output;
    case 'node/%/edit/options':
      $output = '<p>'. t("<em>Note that the multi-currency prices override the base price settings.</em>") .'</p>';
      return $output;
  }
}

function uc_multi_currency_format($value, $currency) {
  if ($currency == NULL) {
    $currency = _uc_multi_currency_currency_load(variable_get('uc_currency_code', 'USD'));
  }
  if (!is_object($currency)) {
    $currency = _uc_multi_currency_currency_load($currency);
  }
  $pattern = ($value >= 0) ? $currency->positive : $currency->negative;
  $number = number_format(abs($value), $currency->prec, $currency->dec_char, $currency->group_char);
  return preg_replace('|#.*#|', $number, $pattern);
}

/**
 * Implements hook_theme_registry_alter().
 *
 * Overriding various price-related theme displays.
 */
function uc_multi_currency_theme_registry_alter(&$theme_registry) {
  $path = drupal_get_path('module', 'uc_multi_currency');

  $theme_registry['uc_price']['includes'][] = $path .'/uc_multi_currency.theme.inc';
  $theme_registry['uc_price']['function'] = 'theme_uc_multi_currency_uc_price';
  $theme_registry['uc_price']['variables'] = array('price' => 0, 'currency' => 0, 'suffixes' => NULL);

  $theme_registry['uc_product_price']['includes'][] = $path .'/uc_multi_currency.theme.inc';
  $theme_registry['uc_product_price']['function'] = 'theme_uc_multi_currency_uc_product_price';
}

/**
 * Loads currencies by identifier.
 *
 * @param $cid
 *   (Optional) The currencies to load. Can be:
 *   - a single {uc_multi_currency}.cid identifier,
 *   - an array of {uc_multi_currency}.cid identifiers,
 *   - empty (all currencies will be loaded).
 *
 * @return array
 *   Currency objects.
 */
function _uc_multi_currency_currency_load($cid = NULL) {
  $currency_list = &drupal_static(__FUNCTION__);
  if (!isset($currency_list)) {
    if ($cache = cache_get(__FUNCTION__)) {
      $currency_list = $cache->data;
    }
    else {
      $currency_list = array();
      $result = db_select('uc_multi_currency', 'c')
        ->fields('c')
        ->execute();
      foreach ($result as $currency) {
        $currency_list[$currency->cid] = $currency;
      }
      cache_set(__FUNCTION__, $currency_list, 'cache');
    }
  }

  if (is_string($cid)) {
    return isset($currency_list[$cid]) ? $currency_list[$cid] : NULL;
  }
  elseif (is_array($cid) && count($cid)) {
    return array_intersect_key($currency_list, $cid);
  }
  else {
    return $currency_list;
  }
}

/**
 * Saves one or more currencies.
 *
 * @param $currencies
 *   The currencies to save. Can be:
 *   - a single currency object,
 *   - an array of currency objects.
 */
function _uc_multi_currency_currency_save($save) {
  if (!is_array($save)) {
    $save = array($save);
  }
  module_invoke_all('uc_currency_presave', $save);
  foreach ($save as $currency) {
    db_merge('uc_multi_currency')
      ->key(array(
        'cid' => $currency->cid,
      ))->fields(array(
        'name' => $currency->name,
        'positive' => $currency->positive,
        'negative' => $currency->negative,
        'enabled' => $currency->enabled ? 1 : 0,
        'symbol' => $currency->symbol,
        'group_char' => $currency->group_char,
        'dec_char' => $currency->dec_char,
        'prec' => $currency->prec,
        'prefix' => intval($currency->prefix),
      ))->execute();
  }
}

/**
 * Deletes one or more currencies.
 *
 * @param $cids
 *   The currencies to delete. Can be:
 *   - a single {uc_multi_currency}.cid identifier,
 *   - an array of {uc_multi_currency}.cid identifiers.
 */
function _uc_multi_currency_currency_delete($cids) {
  if (is_string($cids)) {
    $cids = array($cids);
  }
  db_delete('uc_multi_currency')
    ->condition('cid', $cids, 'IN')
    ->execute();
  db_delete('uc_multi_currency_prices')
    ->condition('cid', $cids, 'IN')
    ->execute();
  cache_clear_all('_uc_multi_currency_currency_load', 'cache');
  module_invoke_all('uc_currency_delete', $cids);
}

/**
 * Loads the multi-currency prices of a product.
 *
 * @param $nid
 *   {node}.nid of the product,
 * @param $cid
 *   {uc_multi_currency}.cid identifier of the currency,
 *
 * @return object
 *   A price object.
 */
function _uc_multi_currency_price_load($nid, $cid) {
  return db_query("SELECT * FROM {uc_multi_currency_prices} WHERE nid = :nid AND cid = :cid LIMIT 1", array(
    ':nid' => $nid,
    ':cid' => $cid,
  ))->fetchObject();
}

/**
 * Loads all multi-currency prices of a product.
 *
 * @param $nid
 *   {node}.nid of the product,
 *
 * @return array
 *   A price array keyed by {uc_multi_currency}.cid currency identifiers.
 */
function _uc_multi_currency_price_all_load($nid) {
  return db_query("SELECT * FROM {uc_multi_currency_prices} WHERE nid = :nid", array(
    ':nid' => $nid,
  ))->fetchAll();
}

/**
 * Saves the multi-currency prices of a product.
 *
 * @param $nid
 *   {node}.nid of the product,
 * @param $cid
 *   {uc_multi_currency}.cid identifier of the currency,
 * @param $price
 *   a price object,
 */
function _uc_multi_currency_price_save($nid, $cid, $price) {
  $price['nid'] = $nid;
  $price['cid'] = $cid;
  drupal_write_record('uc_multi_currency_prices', $price);
}

/**
 * Deletes the multi-currency prices of a product.
 *
 * @param $nid
 *   {node}.nid of the product,
 */
function _uc_multi_currency_price_delete($nid) {
  db_delete('uc_multi_currency_prices')
    ->condition('nid', $nid)
    ->execute();
}

/**
 * Loads the multi-currency attribute prices of a product.
 *
 * @param $nid
 *   {node}.nid of the product,
 * @param $aid
 *   {uc_attributes}.aid of the attribute,
 * @param $cid
 *   {uc_multi_currency}.cid identifier of the currency,
 *
 * @return array
 *   Prices keyed by {uc_attributes}.oid option identifiers.
 */
function _uc_multi_currency_attr_price_load($nid, $aid, $cid) {
  $prices = array();
  $result = db_query("SELECT * FROM {uc_multi_currency_attr_prices} WHERE nid = :nid AND aid = :aid AND cid = :cid", array(
    ':nid' => $nid,
    ':aid' => $aid,
    ':cid' => $cid,
  ));
  foreach ($result as $price) {
    $prices[$price->oid] = $price;
  }
  return $prices;
}

/**
 * Loads all multi-currency attribute prices of a product.
 *
 * @param $nid
 *   {node}.nid of the product,
 * @param $aid
 *   {uc_attributes}.aid of the attribute,
 *
 * @return array
 *   Prices keyed by {uc_attributes}.oid option and {uc_multi_currency}.cid currency identifiers.
 */
function _uc_multi_currency_attr_price_all_load($nid, $aid) {
  $prices = array();
  $result = db_query("SELECT * FROM {uc_multi_currency_attr_prices} WHERE nid = :nid AND aid = :aid", array(
    ':nid' => $nid,
    ':aid' => $aid,
  ));
  foreach ($result as $price) {
    $prices[$price->oid][$price->cid] = $price;
  }
  return $prices;
}

/**
 * Saves the multi-currency attribute prices of a product.
 *
 * @param $nid
 *   {node}.nid of the product,
 * @param $aid
 *   {uc_attributes}.aid of the attribute,
 * @param $oid
 *   {uc_attribute_options}.oid of the attribute,
 * @param $cid
 *   {uc_multi_currency}.cid identifier of the currency,
 * @param $price
 *   a price object,
 */
function _uc_multi_currency_attr_price_save($nid, $aid, $oid, $cid, $price) {
  $price['nid'] = $nid;
  $price['aid'] = $aid;
  $price['oid'] = $oid;
  $price['cid'] = $cid;
  drupal_write_record('uc_multi_currency_attr_prices', $price);
}

/**
 * Deletes the multi-currency attribute prices of a product.
 *
 * @param $nid
 *   {node}.nid of the product,
 * @param $aid
 *   {uc_attributes}.aid of the attribute,
 * @param $oid
 *   {uc_attribute_options}.oid of the attribute,
 */
function _uc_multi_currency_attr_price_delete($nid, $aid, $oid) {
  db_delete('uc_multi_currency_attr_prices')
    ->condition('nid', $nid)
    ->condition('aid', $aid)
    ->condition('oid', $oid)
    ->execute();
}

/**
 * Implements hook_element_info().
 */
function uc_multi_currency_element_info() {
  $types = array();

  $types['uc_multi_currency_price'] = array(
    '#input' => TRUE,
    '#size' => 15,
    '#maxlength' => 15,
    '#autocomplete_path' => FALSE,
    '#process' => array('ajax_process_form'),
    '#element_validate' => array('uc_store_validate_number'),
    '#theme' => 'uc_multi_currency_uc_price_textfield',
    '#theme_wrappers' => array('form_element'),
    '#allow_negative' => FALSE,
    '#empty_zero' => TRUE,
  );

  return $types;
}

/**
 * Implements hook_node_delete().
 */
function uc_multi_currency_node_delete($node) {
  _uc_multi_currency_price_delete($node->nid);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_form().
 *
 * Adds multi-currency prices.
 *
 * @see uc_multi_currency_node_form_submit()
 */
function uc_multi_currency_form_node_form_alter(&$form, $form_state, $form_id) {
  if (uc_product_is_product($form['#node'])) {
    $weight = isset($form['base']['prices']['#weight']) ? $form['base']['prices']['#weight'] + 1 : 10;
    $form['base']['uc_multi_currency'] = array(
      '#type' => 'container',
      '#weight' => $weight,
      '#tree' => TRUE,
    );
    $form['base']['#attached'] = array(
      'js' => array('vertical-tabs' => drupal_get_path('module', 'uc_multi_currency') . '/uc_multi_currency.js'),
    );
    unset($form['base']['prices']);

    $nid = $form['nid']['#value'];
    $rows = array();
    $currencies = _uc_multi_currency_currency_load();
    foreach ($currencies as $currency) {
      if ($currency->enabled) {
        $prices = _uc_multi_currency_price_load($nid, $currency->cid);
        $row = array();
        $row['topic'] = array(
          '#type' => 'markup',
          '#markup' => check_plain($currency->name),
        );
        $row['list_price'] = array(
          '#type' => 'uc_multi_currency_price',
          '#default_value' => uc_store_format_price_field_value(isset($prices->list_price) ? $prices->list_price : 0),
          '#currency' => $currency->cid,
        );
        $row['cost'] = array(
          '#type' => 'uc_multi_currency_price',
          '#default_value' => uc_store_format_price_field_value(isset($prices->cost) ? $prices->cost : 0),
          '#currency' => $currency->cid,
        );
        $row['sell_price'] = array(
          '#type' => 'uc_multi_currency_price',
          '#default_value' => uc_store_format_price_field_value(isset($prices->sell_price) ? $prices->sell_price : 0),
          '#currency' => $currency->cid,
        );
        $rows[$currency->cid] = $row;
      }
    }

    $header = array(
      t('Currency'),
      t('List price') .'<br /><small>'. t('The listed MSRP.') .'</small>',
      t('Cost') .'<br /><small>'. t("Your store's cost.") .'</small>',
      t('Sell price') .'<br /><small>'. t('Customer purchase price.') .'</small>',
    );
    $form['base']['uc_multi_currency']['prices'] = array(
      '#type' => 'table',
      '#theme' => 'uc_multi_currency_textfield_table',
      '#header' => $header,
      '#rows' => $rows,
      '#empty' => t('No currencies are defined.'),
      '#caption' => '<label>'. t('Multi-currency prices') . '</label>',
    );
    $form['base']['uc_multi_currency']['prices']['textfields'] = $rows;

    $form['#submit'][] = 'uc_multi_currency_node_form_submit';
  }
}

/**
 * Form submission handler for node_form().
 *
 * @see uc_multi_currency_form_node_form_alter()
 */
function uc_multi_currency_node_form_submit($form, &$form_state) {
  $nid = $form_state['values']['nid'];
  $prices = $form_state['values']['uc_multi_currency']['prices']['textfields'];
  _uc_multi_currency_price_delete($nid);
  foreach ($prices as $cid => $price) {
    _uc_multi_currency_price_save($nid, $cid, $price);
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for uc_attribute_option_form().
 *
 * Adds multi-currency prices.
 *
 * @see uc_multi_currency_uc_attribute_option_form_submit()
 */
function uc_multi_currency_form_uc_attribute_option_form_alter(&$form, $form_state) {
  $weight = isset($form['adjustments']['weight']['#weight']) ? $form['adjustments']['weight']['#weight'] : 2;
  $form['adjustments']['uc_multi_currency'] = array(
    '#type' => 'container',
    '#weight' => $weight,
    '#tree' => TRUE,
  );
  unset($form['adjustments']['cost']);
  unset($form['adjustments']['price']);

  $aid = isset($form['aid']['#value']) ? $form['aid']['#value'] : 0;
  $oid = isset($form['oid']['#value']) ? $form['oid']['#value'] : 0;
  $rows = array();
  $currencies = _uc_multi_currency_currency_load();
  foreach ($currencies as $currency) {
    if ($currency->enabled) {
      $prices = _uc_multi_currency_attr_price_load(0, $aid, $currency->cid);
      $row = array();
      $row['topic'] = array(
        '#type' => 'markup',
        '#markup' => check_plain($currency->name),
      );
      $row['cost'] = array(
        '#type' => 'uc_multi_currency_price',
        '#default_value' => uc_store_format_price_field_value(isset($prices[$oid]->cost) ? $prices[$oid]->cost : 0),
        '#currency' => $currency->cid,
      );
      $row['price'] = array(
        '#type' => 'uc_multi_currency_price',
        '#default_value' => uc_store_format_price_field_value(isset($prices[$oid]->price) ? $prices[$oid]->price : 0),
        '#currency' => $currency->cid,
      );
      $rows[$currency->cid] = $row;
    }
  }

  $header = array(
    t('Currency'),
    t('Cost'),
    t('Price'),
  );
  $form['adjustments']['uc_multi_currency']['prices'] = array(
    '#type' => 'table',
    '#theme' => 'uc_multi_currency_textfield_table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => t('No currencies are defined.'),
    '#caption' => '<label>'. t('Multi-currency prices') . '</label>',
  );
  $form['adjustments']['uc_multi_currency']['prices']['textfields'] = $rows;

  $form['#submit'][] = 'uc_multi_currency_uc_attribute_option_form_submit';
}

/**
 * Form submission handler for uc_attribute_option_form().
 */
function uc_multi_currency_uc_attribute_option_form_submit($form, &$form_state) {
  $aid = $form_state['values']['aid'];
  $oid = $form_state['values']['oid'];
  $prices = $form_state['values']['uc_multi_currency']['prices']['textfields'];
  _uc_multi_currency_attr_price_delete(0, $aid, $oid);
  foreach ($prices as $cid => $price) {
    _uc_multi_currency_attr_price_save(0, $aid, $oid, $cid, $price);
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for uc_object_options_form().
 *
 * Adds multi-currency prices.
 *
 * @see uc_multi_currency_form_uc_object_options_form_submit()
 */
function uc_multi_currency_form_uc_object_options_form_alter(&$form, $form_state, $form_id) {
  $nid = $form['id']['#value'];

  $header = array(
    t('Currency'),
    t('Cost'),
    t('Price'),
  );

  $currencies = _uc_multi_currency_currency_load();
  foreach (element_children($form['attributes']) as $aid) {
    $attribute = &$form['attributes'][$aid];
    $attribute['uc_multi_currency'] = array(
      '#title' => t('Multi-currency prices'),
      '#type' => 'fieldset',
      '#collapsed' => TRUE,
      '#collapsible' => TRUE,
      '#tree' => TRUE,
    );
    foreach ($currencies as $currency) {
      if ($currency->enabled) {
        $prices = _uc_multi_currency_attr_price_load($nid, $aid, $currency->cid);
        $rows = array();
        foreach (element_children($attribute['options']) as $oid) {
          $option = &$attribute['options'][$oid];
          $row = array();
          $row['topic'] = array(
            '#type' => 'markup',
            '#markup' => $option['select']['#title'],
          );
          $row['cost'] = array(
            '#type' => 'uc_multi_currency_price',
            '#default_value' => uc_store_format_price_field_value(isset($prices[$oid]->cost) ? $prices[$oid]->cost : 0),
            '#currency' => $currency->cid,
          );
          $row['price'] = array(
            '#type' => 'uc_multi_currency_price',
            '#default_value' => uc_store_format_price_field_value(isset($prices[$oid]->price) ? $prices[$oid]->price : 0),
            '#currency' => $currency->cid,
          );
          $rows[$oid] = $row;
        }
        $attribute['uc_multi_currency'][$currency->cid]['prices'] = array(
          '#type' => 'table',
          '#theme' => 'uc_multi_currency_textfield_table',
          '#header' => $header,
          '#rows' => $rows,
          '#empty' => t('No currencies are defined.'),
          '#caption' => '<h3>'. t('Prices in @currency', array('@currency' => check_plain($currency->name .' ('. $currency->cid .')'))) .'</h3>',
        );
        $attribute['uc_multi_currency'][$currency->cid]['prices']['textfields'] = $rows;
      }
    }
  }

  $form['#theme'] = 'uc_multi_currency_object_options_form';
  $form['#submit'][] = 'uc_multi_currency_form_uc_object_options_form_submit';
}

/**
 * Form submission handler for uc_object_options_form().
 */
function uc_multi_currency_form_uc_object_options_form_submit($form, &$form_state) {
  $nid = $form_state['values']['id'];
  foreach ($form_state['values']['attributes'] as $aid => $attribute) {
    $attr = uc_attribute_load($aid, $nid, 'product');
    foreach ($attribute['uc_multi_currency'] as $cid => $currency) {
      foreach ($currency['prices']['textfields'] as $oid => $price) {
        // In order to trigger uc_attribute_priced_attributes() later.
        if ($price['price'] > 0) {
          $attr->options[$oid]->price = 0.01;
        }
        if ($price['cost'] > 0) {
          $attr->options[$oid]->cost = 0.01;
        }
        _uc_multi_currency_attr_price_save($nid, $aid, $oid, $cid, $price);
      }
    }
    uc_attribute_subject_save($attr, 'product', $nid, TRUE);
  }
}

/**
 * Creates a data array for use with uc_product_load_variant().
 *
 * @param object $product
 *   the product to work with
 *
 * Returns the prepared data array.
 */
function _uc_multi_currency_create_product_data(&$product, $extra = array()) {
  $data = array('display_only' => TRUE) + $product->data;
  if (empty($data['attributes'])) {
    $data['attributes'] = array();
  }
  $data['attributes'] = $extra + $data['attributes'];
  return $data;
}

/**
 * Implements hook_form_alter().
 *
 * Use this hook instead of hook_uc_form_alter() because it runs at a later stage.
 */
function uc_multi_currency_form_alter(&$form, &$form_state, $form_id) {
  if (strpos($form_id, 'add_to_cart_form') || $form_id == 'uc_order_add_product_form') {
    $product = &$form['node']['#value'];
    if (isset($product->currency)) {
      $currency = _uc_multi_currency_currency_load($product->currency);
    }
    $format = variable_get('uc_attribute_option_price_format', 'adjustment');
    $data = _uc_multi_currency_create_product_data($product);
    $base_product = node_view(uc_product_load_variant($product->nid, $data), 'teaser');
    if (isset($form['attributes'])) {
      foreach (element_children($form['attributes']) as $aid) {
        $attribute = &$form['attributes'][$aid];
        if (isset($attribute['#options'])) {
          foreach ($attribute['#options'] as $oid => &$name) {
            if ($oid) {
              $option = $product->attributes[$aid]->options[$oid];
              $name = $option->name;
              $data = _uc_multi_currency_create_product_data($product, array($aid => $oid));
              $variant_product = node_view(uc_product_load_variant($product->nid, $data), 'teaser');
              switch ($format) {
                case 'total':
                  if ($attribute->display != 3) {
                    $name .= ' ';
                    $name .= uc_multi_currency_format($variant_product['display_price']['#value'], $currency);
                  }
                  break;
                case 'adjustment':
                  $adjustment = $variant_product['display_price']['#value'] - $base_product['display_price']['#value'];
                  if ($adjustment != 0) {
                    $name .= ' ';
                    $name .= ($adjustment > 0) ? '+' : '-';
                    $name .= uc_multi_currency_format(abs($adjustment), $currency);
                  }
                  break;
                }
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_uc_order_pane_alter().
 */
function uc_multi_currency_uc_order_pane_alter(&$panes) {
  $callbacks = &drupal_static('uc_multi_currency_order_pane_saved_callbacks');
  $callbacks['line_items'] = $panes['line_items']['callback'];
  $panes['line_items']['callback'] = '_uc_multi_currency_order_pane_callback_line_items';
  $callbacks['products'] = $panes['products']['callback'];
  $panes['products']['callback'] = '_uc_multi_currency_order_pane_callback_products';
  if (module_exists('uc_payment')) {
//    $callbacks['payment'] = $panes['payment']['callback'];
//    $panes['payment']['callback'] = '_uc_multi_currency_order_pane_callback_payment';
  }
}

/**
 * Overriding order pane callbacks.
 * All of them call the original callback and modify price items if necessary.
 */
function _uc_multi_currency_order_pane_callback_line_items($op, $order, &$form = NULL, &$form_state = NULL) {
  $callbacks = &drupal_static('uc_multi_currency_order_pane_saved_callbacks');
  $callback = $callbacks['line_items'];
  if ($callback) {
    if ($op == 'view' || $op == 'customer' || $op == 'edit-form') {
      $form = $callback($op, $order, $form, $form_state);
      foreach (element_children($form['line_items']) as $key) {
        $form['line_items'][$key]['amount']['#type'] = 'uc_multi_currency_price';
        $form['line_items'][$key]['amount']['#currency'] = $order->currency;
      }
      return $form;
    }
    return $callback($op, $order, $form, $form_state);
  }
};

function _uc_multi_currency_order_pane_callback_products($op, $order, &$form = NULL, &$form_state = NULL) {
  $callbacks = &drupal_static('uc_multi_currency_order_pane_saved_callbacks');
  $callback = $callbacks['products'];
  if ($callback) {
    if ($op == 'view' || $op == 'customer' || $op == 'edit-form') {
      $form = $callback($op, $order, $form, $form_state);
      if (isset($form['#rows'])) {
        foreach (element_children($form['#rows']) as $key) {
          $form['#rows'][$key]['cost']['#currency'] = $order->currency;
          $form['#rows'][$key]['price']['#currency'] = $order->currency;
          $form['#rows'][$key]['total']['#currency'] = $order->currency;
        }
      }
      if (isset($form['products'])) {
        foreach (element_children($form['products']) as $key) {
          $form['products'][$key]['cost']['#type'] = 'uc_multi_currency_price';
          $form['products'][$key]['cost']['#currency'] = $order->currency;
          $form['products'][$key]['price']['#type'] = 'uc_multi_currency_price';
          $form['products'][$key]['price']['#currency'] = $order->currency;
        }
      }
      return $form;
    }
    return $callback($op, $order, $form, $form_state);
  }
};

function _uc_multi_currency_order_pane_callback_payment($op, $order, &$form = NULL, &$form_state = NULL) {
  $callbacks = &drupal_static('uc_multi_currency_order_pane_saved_callbacks');
  $callback = $callbacks['payment'];
  if ($callback) {
    if ($op == 'view' || $op == 'customer' || $op == 'edit-form') {
      $form = $callback($op, $order, $form, $form_state);
      $form['balance'] = array(
        '#theme' => 'uc_product_price',
        '#value' => uc_payment_balance($order),
        '#currency' => $order->currency,
        '#title' => t('Balance'),
      );
      return $form;
    }
    return $callback($op, $order, $form, $form_state);
  }
};

/**
 * Implements hook_form_FORM_ID_alter() for uc_store_settings_form().
 */
function uc_multi_currency_form_uc_store_settings_form_alter(&$form, $form_state, $form_id) {
  $form['currency']['warning'] = array(
    '#type' => 'markup',
    '#markup' => '<p style="color:red">'. t('Use the <a href="/admin/store/settings/currency">settings</a> of the Ubercart Multi-Currency module instead.') .'</p>',
    '#weight' => -999,
  );
}

/**
 * Returns the currency set for the current circumstances.
 *
 * It calls the enabled providers in weight order until the first decision is made.
 * If there is no decision, it returns the Ubercart default currency.
 */
function uc_multi_currency_get_currency() {
  $cid = 0;
  $providers = _uc_multi_currency_currency_usage_provider_info();
  $enabled = variable_get('uc_multi_currency_providers_enable', array());
  $weights = variable_get('uc_multi_currency_providers_weight', array());

  foreach ($weights as $type => $weight) {
    $provider = $providers[$type];
    if ($enabled[$type]) {
      require_once($provider['file']);
      $func = 'uc_multi_currency_provider_'. $type .'_callback';
      if (function_exists($func)) {
        $cid = $func();
        if ($cid) {
          return $cid;
        }
      }
    }
  }
  return variable_get('uc_currency_code', 'USD');
}

/**
 * Returns an array of info about currency usage detection providers.
 */
function _uc_multi_currency_currency_usage_provider_info() {
  $info = array();

  $info['manual'] = array(
    'name' => t('Selected by user'),
    'description' => t('Currency selected by the user'),
    'weight' => 1,
    'file' => 'providers/uc_multi_currency_provider_manual.inc',
  );
  $info['localized'] = array(
    'name' => t('Localized pages'),
    'description' => t('Select currencies based on localization'),
    'weight' => 2,
    'file' => 'providers/uc_multi_currency_provider_localized.inc',
  );
  $info['roles'] = array(
    'name' => t('User roles'),
    'description' => t('Select currencies based on user roles'),
    'weight' => 3,
    'file' => 'providers/uc_multi_currency_provider_roles.inc',
  );
  $info['types'] = array(
    'name' => t('Product content type'),
    'description' => t('Select currencies based on product content type'),
    'weight' => 4,
    'file' => 'providers/uc_multi_currency_provider_types.inc',
  );
  $info['taxonomy'] = array(
    'name' => t('Taxonomy'),
    'description' => t('Select currencies based on taxonomy'),
    'weight' => 5,
    'file' => 'providers/uc_multi_currency_provider_taxonomy.inc',
  );

  return $info;
}

/**
 * Implements hook_node_load().
 */
function uc_multi_currency_node_load($nodes, $types) {
  $cid = uc_multi_currency_get_currency();
  foreach ($nodes as $nid => &$node) {
    if (uc_product_is_product($node->type)) {
      $prices = _uc_multi_currency_price_load($nid, $cid);
//      if (!$prices) {
//        drupal_set_message(t('Multi-currency prices are not yet set for this product.'), 'warning', FALSE);
//      }
      // Product prices.
      $node->list_price = isset($prices->list_price) ? $prices->list_price : 0;
      $node->cost = isset($prices->cost) ? $prices->cost : 0;
      $node->price = $node->sell_price = isset($prices->sell_price) ? $prices->sell_price : 0;
      $node->currency = $cid;
      // Attribute prices.
      if (isset($node->attributes) && is_array($node->attributes)) {
        foreach ($node->attributes as $aid => &$attribute) {
          $prices = _uc_multi_currency_attr_price_load($nid, $aid, $cid);
          if (isset($attribute->options) && is_array($attribute->options)) {
            foreach ($attribute->options as $oid => &$option) {
//              if (!$prices) {
//                drupal_set_message(t('Multi-currency attribute prices are not yet set for this product.'), 'warning', FALSE);
//              }
              $option->price = isset($prices[$oid]->price) ? $prices[$oid]->price : 0;
              $option->cost = isset($prices[$oid]->cost) ? $prices[$oid]->cost : 0;
              $option->currency = $cid;
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_uc_cart_alter().
 */
function uc_multi_currency_uc_cart_alter(&$items) {
  foreach ($items as &$item) {
    $prices = _uc_multi_currency_price_load($item->nid, isset($item->currency) ? $item->currency : variable_get('uc_currency_code', 'USD'));
    $item->list_price = isset($prices->list_price) ? $prices->list_price : 0;
    $item->cost = isset($prices->cost) ? $prices->cost : 0;
    $item->price = $item->sell_price = isset($prices->sell_price) ? $prices->sell_price : 0;
  }
}

/**
 * Implements hook_uc_order().
 */
function uc_multi_currency_uc_order($op, &$order, $arg2) {
  global $user;

  switch ($op) {
    case 'presave':
      $order->currency = uc_multi_currency_get_currency();
      break;
    case 'load':
      if (isset($order->products) && is_array($order->products)) {
        foreach ($order->products as $nid => $product) {
          $order->products[$nid]->currency = $order->currency;
        }
      }
      break;
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * @see theme()
 * @see MODULE_preprocess_HOOK()
 */
function uc_multi_currency_preprocess_node(&$variables) {
  if (uc_product_is_product($variables['type'])) {
    $cid = uc_multi_currency_get_currency();
    $variables['content']['list_price']['#currency'] = $cid;
    $variables['content']['cost']['#currency'] = $cid;
    $variables['content']['sell_price']['#currency'] = $cid;
    $variables['content']['display_price']['#currency'] = $cid;
  }
}

/**
 * Implements hook_block_info().
*/
function uc_multi_currency_block_info() {
  $blocks = array();

  $blocks['uc_multi_currency'] = array(
    'info' => t('Choose currency'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
*/
function uc_multi_currency_block_view($delta = '') {
  if (user_access('choose currency')) {
    $items = array();
    $current = uc_multi_currency_get_currency();
    foreach (_uc_multi_currency_currency_load() as $cid => $currency) {
      $class = ($cid == $current) ? array('active') : array();
      $current = drupal_lookup_path('alias', current_path());
      $items[] = array(
        'data' => l(trim($currency->symbol) .' ('. $currency->name .')', 'uc_multi_currency/'. $cid .'/set/', array('query' => array('destination' => $current))),
        'class' => $class,
      );
    }
    return array(
      'subject' => t('Choose currency'),
      'content' => theme('item_list', array('items' => $items, 'attributes' => array('class' => 'uc-multi-currency-chooser'))),
    );
  }
}
